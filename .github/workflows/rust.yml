name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  RUSTFLAGS: -Dwarnings
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: test pitaya
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        run: rustup update stable

      - name: Install cargo-make
        run: cargo install cargo-make

      - name: test pitaya
        run: |
          makers deps
          cargo test
          makers undeps

  build-mac:
    name: build pitaya for mac
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        run: rustup update stable

      - name: Install fmt
        run: rustup component add rustfmt

      - name: Build Pitaya
        run: cargo build --release

      - name: List symbols
        run: nm target/release/libpitaya.dylib | wc -l
      # We have to tar the artifact before upload, otherwise we'll lose 
      # permissions of the executable when downloading the artifact again.
      # Ref: https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
      - name: Tar Build Artifact
        run: tar -cvf libpitaya.dylib.tar target/release/libpitaya.dylib

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: libpitaya.dylib.tar
          path: libpitaya.dylib.tar

  build-linux:
    name: build pitaya for linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        run: rustup update stable

      - name: Build Pitaya
        run: cargo build --release

      # We have to tar the artifact before upload, otherwise we'll lose 
      # permissions of the executable when downloading the artifact again.
      # Ref: https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
      - name: Tar Build Artifact
        run: tar -cvf libpitaya.so.tar target/release/libpitaya.so

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: libpitaya.so.tar
          path: libpitaya.so.tar

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Rust
        run: rustup update stable
      - name: Install clippy
        run: rustup component add clippy

      # Check fmt
      - name: "rustfmt --check"
        run: cargo fmt -- --check

      # Run clippy
      - name: "clippy --all"
        run: cargo clippy --all --tests

  nupkg:
    name: create nupkg
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
      - build-linux
      - build-mac
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Download Mac binary
      - uses: actions/download-artifact@v2
        with:
          name: libpitaya.so.tar

      # Download Libnux binary
      - uses: actions/download-artifact@v2
        with:
          name: libpitaya.dylib.tar
        
      # Open Mac and Linux archives
      - name: "open mac and linux archives"
        run: |
          tar -xvf libpitaya.dylib.tar
          tar -xvf libpitaya.so.tar

      - name: "build c#"
        run: |
          cd pitaya-sharp
          make pack

      - name: Upload NuPkg
        uses: actions/upload-artifact@v2
        with:
          name: NPitaya
          path: pitaya-sharp/NPitaya/bin/Release/*.nupkg
